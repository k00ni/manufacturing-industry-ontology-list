#!/usr/bin/env php
<?php

/**
 * This file alignes content of ontologies.csv.
 */

declare(strict_types=1);

require __DIR__.'/../vendor/autoload.php';

$statistics = [
    'license-usage' => [],
    'number-of-domain-related-ontologies' => 0,
    'number-of-entries-with-information-not-available' => 0,
    'number-of-entries-without-information-not-available' => 0,
    //
    'number-of-entries-with-rdf-xml-or-turtle-file' => 0,
    'number-of-entries-with-download-location' => 0,
    //
    'number-of-entries-with-last-activity-info' => 0,
    'number-of-entries-with-last-activity-within-3-years' => 0,
    'number-of-entries-with-last-activity-within-7-years' => 0,
    'number-of-entries-with-last-activity-older-than-7-years' => 0,
    //
    'number-of-entries-with-dereferenceable-ontology-uri' => 0,
];

/*
 * Alignment part
 */
$csvEntries = array_map('str_getcsv', file(__DIR__.'/../../ontologies.csv'));
foreach ($csvEntries as $line => $entry) {
    if (0 == $line) {
        continue;
    }

    // ignore all non domain related ontologies
    if ('no' == $entry[1]) {
        continue;
    }

    // domain related
    ++$statistics['number-of-domain-related-ontologies'];

    /*
     * Preparation part ----------------------------------------------------------------
     */

    $rdfFileUrl = null;

    // ontology IRI
    $ontologyIRI = $entry[7];

    // related RDF file(s)
    $rdfXmlFile = isEmpty($entry[8]) ? null : $entry[8];
    $turtleFile = isEmpty($entry[9]) ? null : $entry[9];

    $rdfFileUrl = $rdfXmlFile ?? $turtleFile;
    if (isEmpty($rdfFileUrl)) {
        if (isEmpty($entry[10])) {
            echo PHP_EOL;
            echo PHP_EOL;
            echo 'Invalid entry:';
            echo PHP_EOL;
            var_dump($entry);
            echo PHP_EOL;
            return;
        } else {
            ++$statistics['number-of-entries-with-download-location'];
        }
    } else {
        ++$statistics['number-of-entries-with-rdf-xml-or-turtle-file'];
    }

    /*
     * Stats part ----------------------------------------------------------------
     */

    /*
     * License
     */
    if (false === isset($statistics['license-usage'][$entry[12]])) {
        $statistics['license-usage'][$entry[12]] = ['license' => $entry[12], 'count' => 0];
    }
    ++$statistics['license-usage'][$entry[12]]['count'];

    /*
     * Check amount of entries with Information not available in one of its fields
     */
    $foundInfoNotAvail = false;
    foreach ($entry as $value) {
        if (str_contains($value, 'Information not available')) {
            $foundInfoNotAvail = true;
            break;
        }
    }
    if ($foundInfoNotAvail) {
        ++$statistics['number-of-entries-with-information-not-available'];
    } else {
        ++$statistics['number-of-entries-without-information-not-available'];
    }

    /*
     * last activity with 3 and 7 years
     */
    if ('Information not available' != $entry[5]) {
        ++$statistics['number-of-entries-with-last-activity-info'];

        // define timestamps 3 and 7 years ago
        $now = new DateTime('now');
        $threeYearsAgo = (new DateTime('now'))->modify('-3 years')->format('Y-m-d');
        $sevenYearsAgo = (new DateTime('now'))->modify('-7 years')->format('Y-m-d');

        $d = new DateTime($entry[5]);
        // within 3 years
        if ($threeYearsAgo <= $d->format('Y-m-d')) {
            ++$statistics['number-of-entries-with-last-activity-within-3-years'];
        } elseif ($sevenYearsAgo <= $d->format('Y-m-d')) {
            // within 7 years
            ++$statistics['number-of-entries-with-last-activity-within-7-years'];
        } else {
            ++$statistics['number-of-entries-with-last-activity-older-than-7-years'];
        }
    }

    /**
     * check if ontology uri is dereferenceable
     */
    if (urlIsAccessible($entry[7])) {
        ++$statistics['number-of-entries-with-dereferenceable-ontology-uri'];
        echo '.';
    }
}

// sort licence list
usort($statistics['license-usage'], function($a, $b) {
    return $a['count'] < $b['count'] ? 1 : -1;
});

$licenses = $statistics['license-usage'];
unset($statistics['license-usage']);

echo PHP_EOL;
echo PHP_EOL;

foreach ($licenses as $entry) {
    if (10 <= $entry['count']) {
    }
    echo PHP_EOL.'\item \textbf{'.$entry['count'].'x} '.$entry['license'];
}

echo PHP_EOL;
echo PHP_EOL;
var_dump($statistics);

// TODO print statistics nicely

echo PHP_EOL;