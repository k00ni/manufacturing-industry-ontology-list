#!/usr/bin/env php
<?php

/**
 * This file generates config code for graph visualization on yuml.me.
 */

declare(strict_types=1);

use quickRdf\DataFactory;

require __DIR__.'/../src/bootstrap.php';

$dataFactory = new DataFactory();
$unknownOntologies = [];

echo PHP_EOL;

foreach ($simplifiedOntologyList as $iri => $entry) {
    echo PHP_EOL;
    echo PHP_EOL.$iri;
    echo PHP_EOL;

    if (0 == strlen($entry['rdfxml_file']) && 0 == strlen($entry['turtle_file'])) {
        continue;
    }

    if (str_contains($entry['rdfxml_file'], '.zip') || str_contains($entry['rdfxml_file'], '.zip')) {
        continue;
    }

    // download file and read content
    if (0 < strlen($entry['rdfxml_file'])) {
        $format = 'rdf';
        $rdfFileContent = getContentOfRdfFile($entry['rdfxml_file']);
        $store = loadQuadsIntoInMemoryStore($entry['rdfxml_file'], 300);
    } else {
        $format = 'turtle';
        $rdfFileContent = getContentOfRdfFile($entry['turtle_file']);
        $store = loadQuadsIntoInMemoryStore($entry['turtle_file'], 300);
    }

    $owlImportIris = [];
    if (null !== $store) {
        $owlImportIris = getOwlImportIris($store);
    }

    // go through the list of namespace IRIs and owl:imports
    $iris = array_merge(
        getNamespaceUriListUsedInRdfFile($rdfFileContent, $format),
        $owlImportIris
    );

    foreach ($iris as $referencedOntologyFileUrl) {
        echo ',';

        $store = loadQuadsIntoInMemoryStore($referencedOntologyFileUrl, 300);
        if (null == $store) {
            continue;
        }

        $result = $store->query('SELECT ?iri WHERE {?iri a owl:Ontology.}');

        if (1 == count($result['result']['rows'])) {
            $ontologyIRI = $result['result']['rows'][0]['iri'];

            // get related ontology title
            if (
                isOntologyIriAlreadyKnown($ontologyIRI)
                || isset($unknownOntologies[$ontologyIRI])
                || '_:' == substr($ontologyIRI, 0, 2) // ignore blank nodes
            ) {
                // is known
                continue;
            } else {
                $unknownOntologies[$ontologyIRI] = $ontologyIRI;

                echo PHP_EOL;
                echo '#############################################################################################';
                echo PHP_EOL.'UNKNOWN: '.$ontologyIRI.PHP_EOL;
                echo 'Namespace/owl:import reference: '.$iri.PHP_EOL;
                echo 'Related RDF file URL: '.$referencedOntologyFileUrl.PHP_EOL;
                echo '#############################################################################################';
                echo PHP_EOL;

                echo PHP_EOL;
                echo getCSVLineForOntology($referencedOntologyFileUrl, $store, $format);
                echo PHP_EOL;
                echo PHP_EOL;

                return 1;
            }
        } else {
            continue;
        }
    }

    if (0 == count($iris)) {
        throw new Exception($entry['ontology_iri'].': No related namespaces and owl:imports found (format='.$format.')!');
    }
}

echo PHP_EOL;

if (0 < count($unknownOntologies)) {
    return 1;
} else {
    return 0;
}