#!/usr/bin/env php
<?php

/**
 * This file generates config code for graph visualization on yuml.me.
 */

declare(strict_types=1);

use quickRdf\DataFactory;

require __DIR__.'/../src/bootstrap.php';

$dataFactory = new DataFactory();
$unknownOntologies = [];

echo PHP_EOL;
$foundInvalidURIs = [];

foreach ($simplifiedOntologyList as $iri => $entry) {
    echo PHP_EOL;
    echo PHP_EOL;
    echo PHP_EOL.'###############################################################################';
    echo PHP_EOL.'Check '. $iri.' namespaces and owl:imports';
    echo PHP_EOL.'###############################################################################';
    echo PHP_EOL;
    echo PHP_EOL;

    if (0 == strlen($entry['rdfxml_file']) && 0 == strlen($entry['turtle_file'])) {
        echo PHP_EOL.' ignored, no file URLs provided.'.PHP_EOL;
        $foundInvalidURIs[$entry['ontology_iri']] = 'ignored, no file URLs provided';
        continue;
    }

    if (false === isEmpty($entry['download_location'])) {
        echo PHP_EOL.'CSV entry with IRI '.$entry['ontology_iri'].' ignored, no directly accessible RDF file'.PHP_EOL;
        continue;
    }

    // download file and read content
    if (0 < strlen($entry['rdfxml_file'])) {
        $format = 'rdf';
        $usedRdfFileUrl = $entry['rdfxml_file'];
        $rdfFileContent = getContentOfRdfFile($entry['rdfxml_file']);

    } else {
        $format = 'turtle';
        $usedRdfFileUrl = $entry['turtle_file'];
        $rdfFileContent = getContentOfRdfFile($entry['turtle_file']);
    }

    if (isEmpty($rdfFileContent)) {
        echo PHP_EOL.'EMPTY file: '.$usedRdfFileUrl.PHP_EOL;
        $foundInvalidURIs[$entry['ontology_iri']] = 'empty file ('.$usedRdfFileUrl.')';
        continue;
    }

    // load part of ontology
    $store = loadQuadsIntoInMemoryStore($usedRdfFileUrl);
    $owlImportIris = [];
    if (null !== $store) {
        $owlImportIris = getOwlImportIris($store);
    }

    // go through the list of namespace IRIs and owl:imports
    $iris = array_merge(
        getNamespaceUriListUsedInRdfFile($rdfFileContent, $format),
        $owlImportIris
    );

    foreach ($iris as $referencedOntologyFileUrl) {
        echo ',';

        if (isset($brokenLinksRedirects[$referencedOntologyFileUrl])) {
            echo PHP_EOL;
            echo 'IGNORED: '.$referencedOntologyFileUrl.' because it is in broken-links-redirects.csv';
            echo PHP_EOL;
            continue;
        }

        $store = loadQuadsIntoInMemoryStore($referencedOntologyFileUrl);
        if (null == $store) {
            continue;
        }

        $result = $store->query('SELECT ?iri WHERE {?iri a owl:Ontology.}');

        if (1 == count($result['result']['rows'])) {
            $ontologyIRI = $result['result']['rows'][0]['iri'];

            // get related ontology title
            if (
                isOntologyIriAlreadyKnown($ontologyIRI)
                || isset($unknownOntologies[$ontologyIRI])
                || '_:' == substr($ontologyIRI, 0, 2) // ignore blank nodes
            ) {
                // is known
                continue;
            } else {
                $unknownOntologies[$ontologyIRI] = $ontologyIRI;

                echo PHP_EOL;
                echo '#############################################################################################';
                echo PHP_EOL.'UNKNOWN: '.$ontologyIRI.PHP_EOL;
                echo 'Namespace/owl:import reference: '.$iri.PHP_EOL;
                echo 'Related RDF file URL: '.$referencedOntologyFileUrl.PHP_EOL;
                echo '#############################################################################################';
                echo PHP_EOL;

                echo PHP_EOL;
                echo getCSVLineForOntology($referencedOntologyFileUrl, $store, $format);
                echo PHP_EOL;
                echo PHP_EOL;

                return 1;
            }
        } else {
            continue;
        }
    }

    $noIrisFound = 0 == count($iris);
    $referencedFileNotPartOfBrokenLinksList = false === isset($brokenLinksRedirects[$usedRdfFileUrl]);
    if ($noIrisFound && $usedRdfFileNotPartOfBrokenLinksList) {
        $msg = 'Ontology entry with IRI: '.$entry['ontology_iri'] . ' has no files with namespaces/owl:imports in file ';
        $msg .= $usedRdfFileUrl.' (format=' . $format . ')!';
        echo PHP_EOL;
        echo PHP_EOL;
        echo $msg;
        echo PHP_EOL;
        echo PHP_EOL.'STOPPED';
        echo PHP_EOL;
        var_dump($brokenLinksRedirects);
        echo PHP_EOL;

        $foundInvalidURIs[$entry['ontology_iri']] = $referencedOntologyFileUrl.' no namespaces and owl:imports found';
        return;
    }
}

/*
 * build a simple list to be sorted afterwards
 */
$list = [];
foreach ($foundInvalidURIs as $uri => $comment) {
    $list[] = ['uri' => $uri, 'comment' => $comment];
}
usort($list, function($a, $b) {
    return $a['uri'] < $b['uri'] ? 1 : -1;
});
// write the sorted list into a file
$str = '';
foreach ($list as $entry) {
    $str .= '"'.$entry['uri'].'","'.$entry['comment'].'"'.PHP_EOL;
}
// uncomment to get a list of invalid URIs found during execution
// file_put_contents(__DIR__.'/../../found-invalid-uris.csv', $str);

// ...
echo PHP_EOL;

if (0 < count($unknownOntologies)) {
    return 1;
} else {
    return 0;
}